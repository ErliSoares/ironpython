//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="MathServiceSoap", Namespace="http://tempuri.org/")]
public partial class MathService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback AddOperationCompleted;
    
    private System.Threading.SendOrPostCallback SubtractOperationCompleted;
    
    private System.Threading.SendOrPostCallback MultiplyOperationCompleted;
    
    private System.Threading.SendOrPostCallback DivideOperationCompleted;
    
    /// <remarks/>
    public MathService() {
        this.Url = "http://www.dotnetjunkies.com/quickstart/aspplus/samples/services/MathService/CS/M" +
            "athService.asmx";
    }
    
    /// <remarks/>
    public event AddCompletedEventHandler AddCompleted;
    
    /// <remarks/>
    public event SubtractCompletedEventHandler SubtractCompleted;
    
    /// <remarks/>
    public event MultiplyCompletedEventHandler MultiplyCompleted;
    
    /// <remarks/>
    public event DivideCompletedEventHandler DivideCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Add", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public float Add(float a, float b) {
        object[] results = this.Invoke("Add", new object[] {
                    a,
                    b});
        return ((float)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdd(float a, float b, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Add", new object[] {
                    a,
                    b}, callback, asyncState);
    }
    
    /// <remarks/>
    public float EndAdd(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((float)(results[0]));
    }
    
    /// <remarks/>
    public void AddAsync(float a, float b) {
        this.AddAsync(a, b, null);
    }
    
    /// <remarks/>
    public void AddAsync(float a, float b, object userState) {
        if ((this.AddOperationCompleted == null)) {
            this.AddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOperationCompleted);
        }
        this.InvokeAsync("Add", new object[] {
                    a,
                    b}, this.AddOperationCompleted, userState);
    }
    
    private void OnAddOperationCompleted(object arg) {
        if ((this.AddCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddCompleted(this, new AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Subtract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public float Subtract(float a, float b) {
        object[] results = this.Invoke("Subtract", new object[] {
                    a,
                    b});
        return ((float)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSubtract(float a, float b, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Subtract", new object[] {
                    a,
                    b}, callback, asyncState);
    }
    
    /// <remarks/>
    public float EndSubtract(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((float)(results[0]));
    }
    
    /// <remarks/>
    public void SubtractAsync(float a, float b) {
        this.SubtractAsync(a, b, null);
    }
    
    /// <remarks/>
    public void SubtractAsync(float a, float b, object userState) {
        if ((this.SubtractOperationCompleted == null)) {
            this.SubtractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtractOperationCompleted);
        }
        this.InvokeAsync("Subtract", new object[] {
                    a,
                    b}, this.SubtractOperationCompleted, userState);
    }
    
    private void OnSubtractOperationCompleted(object arg) {
        if ((this.SubtractCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SubtractCompleted(this, new SubtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Multiply", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public float Multiply(float a, float b) {
        object[] results = this.Invoke("Multiply", new object[] {
                    a,
                    b});
        return ((float)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginMultiply(float a, float b, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Multiply", new object[] {
                    a,
                    b}, callback, asyncState);
    }
    
    /// <remarks/>
    public float EndMultiply(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((float)(results[0]));
    }
    
    /// <remarks/>
    public void MultiplyAsync(float a, float b) {
        this.MultiplyAsync(a, b, null);
    }
    
    /// <remarks/>
    public void MultiplyAsync(float a, float b, object userState) {
        if ((this.MultiplyOperationCompleted == null)) {
            this.MultiplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMultiplyOperationCompleted);
        }
        this.InvokeAsync("Multiply", new object[] {
                    a,
                    b}, this.MultiplyOperationCompleted, userState);
    }
    
    private void OnMultiplyOperationCompleted(object arg) {
        if ((this.MultiplyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.MultiplyCompleted(this, new MultiplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Divide", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public float Divide(float a, float b) {
        object[] results = this.Invoke("Divide", new object[] {
                    a,
                    b});
        return ((float)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDivide(float a, float b, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Divide", new object[] {
                    a,
                    b}, callback, asyncState);
    }
    
    /// <remarks/>
    public float EndDivide(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((float)(results[0]));
    }
    
    /// <remarks/>
    public void DivideAsync(float a, float b) {
        this.DivideAsync(a, b, null);
    }
    
    /// <remarks/>
    public void DivideAsync(float a, float b, object userState) {
        if ((this.DivideOperationCompleted == null)) {
            this.DivideOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDivideOperationCompleted);
        }
        this.InvokeAsync("Divide", new object[] {
                    a,
                    b}, this.DivideOperationCompleted, userState);
    }
    
    private void OnDivideOperationCompleted(object arg) {
        if ((this.DivideCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DivideCompleted(this, new DivideCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void AddCompletedEventHandler(object sender, AddCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public float Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((float)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void SubtractCompletedEventHandler(object sender, SubtractCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SubtractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SubtractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public float Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((float)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void MultiplyCompletedEventHandler(object sender, MultiplyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class MultiplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal MultiplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public float Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((float)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public delegate void DivideCompletedEventHandler(object sender, DivideCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DivideCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DivideCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public float Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((float)(this.results[0]));
        }
    }
}
